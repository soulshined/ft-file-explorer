"use strict";class FTFileExplorerOptions{constructor(options){var _a,_b,_c,_d,_e,_f,_g,_h,_j,_k,_l,_m,_o,_p,_q,_r,_s,_t,_u,_v;this.isDebug=!1,this.explorerStyle="material",this.expandFolders=!1,this.rootPath=null,this.allowKeyboardEventsOnFocus=!1,this.buttons={addFile:{visible:!0,text:"Add File"},addFolder:{visible:!0,text:"Add Folder"},delete:{visible:!0,text:"Delete"}},options&&(this.isDebug=this.define(options.isDebug,!0,[!0,!1],!0),this.expandFolders=this.define(options.expandFolders,!0,[!0,!1],!0),this.explorerStyle=this.define(null!=(_a=options.explorerStyle)?_a:"material","material",["material","compact"]),this.rootPath=null!=(_b=options.rootPath)?_b:null,this.buttons={delete:{visible:this.define((_e=null===(_d=null===(_c=options.buttons)||void 0===_c?void 0:_c.delete)||void 0===_d?void 0:_d.visible,null==_e||_e),!0,[!0,!1],!0),text:this.define((_h=null===(_g=null===(_f=options.buttons)||void 0===_f?void 0:_f.delete)||void 0===_g?void 0:_g.text,null!=_h?_h:"Delete"),"Delete",[],!0)},addFile:{visible:this.define((_l=null===(_k=null===(_j=options.buttons)||void 0===_j?void 0:_j.addFile)||void 0===_k?void 0:_k.visible,null==_l||_l),!0,[!0,!1],!0),text:this.define((_p=null===(_o=null===(_m=options.buttons)||void 0===_m?void 0:_m.addFile)||void 0===_o?void 0:_o.text,null!=_p?_p:"Add File"),"Add File",[],!0)},addFolder:{visible:this.define((_s=null===(_r=null===(_q=options.buttons)||void 0===_q?void 0:_q.addFolder)||void 0===_r?void 0:_r.visible,null==_s||_s),!0,[!0,!1],!0),text:this.define((_v=null===(_u=null===(_t=options.buttons)||void 0===_t?void 0:_t.addFolder)||void 0===_u?void 0:_u.text,null!=_v?_v:"Add Folder"),"Add Folder",[],!0)}},this.allowKeyboardEventsOnFocus=this.define(options.allowKeyboardEventsOnFocus,!0))}format(val){return"boolean"==typeof val&&val.constructor==Boolean?val:val.toString().trim().toLowerCase()}define(val,defaultOption,allowedOptions=[],isStrict=!1){return null==val?defaultOption:allowedOptions.length>0&&!allowedOptions.includes(this.format(val))?(this.isDebug&&console.warn(`[FTIDEOptions] invalid property value '${val}'; expecting one of these values: ${allowedOptions.join()}`),defaultOption):!0===isStrict?val:this.format(val)}}class ElementBuilder{constructor(tagName){tagName&&(this.node=document.createElement(tagName.toUpperCase()))}innerHTML(html){return this.node.innerHTML=html,this}innerText(text){return this.node.innerText=text,this}styles(styles){return this.node.style.cssText+=`;${styles}`,this}id(value){return this.node.id=value,this}addClass(...args){return args.forEach(arg=>{this.node.classList.contains(arg)||this.node.classList.add(arg)}),this}attr(attr,val){return this.node.setAttribute(attr,val),this}prepend(child){return this.node.prepend(child instanceof ElementBuilder?child.build():child),this}append(...child){return child.forEach(element=>{this.node.appendChild(element instanceof ElementBuilder?element.build():element)}),this}build(){return this.node}static from(element,includeChildren=!0){const builder=new ElementBuilder("");return builder.node=element instanceof ElementBuilder?element.node.cloneNode(includeChildren):element.cloneNode(includeChildren),builder}static newSubtree(){return new ElementBuilder("li").addClass("subtree").append(new ElementBuilder("ul").append(new ElementBuilder("li").addClass("folders").append(new ElementBuilder("ul"))).append(new ElementBuilder("li").addClass("files").append(new ElementBuilder("ul"))))}}class FTTreeBuilder{constructor(options){this.cDepth=0,this.options=options}generate(tree){if("object"!=typeof tree&&tree.constructor!==Object)throw new Error("1st Argument expecting an object of kvps");const div=new ElementBuilder("div").addClass("explorer",this.options.explorerStyle),ul=new ElementBuilder("ul").addClass("tree").append(new ElementBuilder("li").addClass("folder","root","open").innerText("/").attr("tabindex",0).attr(Utils.ATTR_NAME,"/").attr("role","tree").attr("aria-expanded",!0)).append(new ElementBuilder("li").addClass("subtree").append(new ElementBuilder("ul").append(...this.createTree(tree))));return div.append(ul).build()}createTree(tree,path=""){const files=new ElementBuilder("ul"),folders=new ElementBuilder("ul");return tree.forEach(node=>{if("string"==typeof node&&node.constructor===String)files.append(this.createFile(node,`${path}/${node}`));else{if("object"!=typeof node||node.constructor!==Object)throw new Error(`[ft-file-explorer] Invalid type for file system. Expecting object or string values, got: <${typeof node}> ${node}`);for(const key in node)if(node.hasOwnProperty(key)){path+=`/${key}`,folders.append(this.createFolder(key,path)),this.cDepth++;const subtree=new ElementBuilder("ul").append(...this.createTree(node[key],path));(subtree.build().firstChild.firstChild.hasChildNodes()||subtree.build().lastChild.firstChild.hasChildNodes())&&folders.append(new ElementBuilder("li").addClass("subtree").append(subtree)),path=path.substring(0,path.indexOf(key)-1)}}}),this.cDepth--,[new ElementBuilder("li").addClass("folders").append(folders),new ElementBuilder("li").addClass("files").append(files)]}createFolder(content,path){this.throwIfHasSlashes(content);const li=new ElementBuilder("LI").addClass("folder").styles(`padding-left: ${15*this.cDepth}px`).attr(Utils.ATTR_NAME,path).attr("tabindex",-1).attr("aria-label","folder").attr("role","group").attr("aria-selected",!1).attr("aria-expanded",!1).append(document.createTextNode(content));return this.options.expandFolders&&(li.addClass("open"),li.attr("aria-expanded",!0)),li}createFile(content,path){this.throwIfHasSlashes(content);const li=new ElementBuilder("LI").addClass("file").styles(`padding-left: ${15*this.cDepth}px;`).attr(Utils.ATTR_NAME,path).attr("tabindex",-1).attr("aria-label","file").attr("role","treeitem").attr("aria-selected",!1).append(document.createTextNode(content));return li}throwIfHasSlashes(content){if(~content.indexOf("/")||~content.indexOf("\\"))throw new Error("[ft-file-explorer] Invalid content name. A file or folder can not contain slashes")}}class FTFileExplorer{constructor(){this.events={selected:null,created:null,creating:null,deleted:null,deleting:null,error:null}}createTree(elementId,tree,options){const explorer=document.getElementById(elementId);if(null===explorer)throw new Error(`1st argument expecting a valid element id, '${elementId}' does not exist`);explorer.classList.contains("ft-file-explorer")||explorer.classList.add("ft-file-explorer"),(options=new FTFileExplorerOptions(options)).isDebug&&(console.log(`FTFileExplorerOptions for #${elementId}:`),console.table(options)),tree=this.sort(tree);const _tree=new FTTreeBuilder(options).generate(tree);this.writeToDOM(explorer,options,_tree),this.registerEvents(explorer,options,_tree)}toJSON(elementId){const explorer=document.getElementById(elementId);if(null===explorer)throw new Error(`1st argument expecting a valid element id, '${elementId}' does not exist`);return Utils.convertToJSON(elementId)}emit(event){if(Object.keys(this.events).includes(event.type)&&this.events[event.type])return this.events[event.type].apply(null,[event.data])}on(event,callback){Object.keys(this.events).includes(event)&&"function"==typeof callback&&(this.events[event]=callback)}sort(tree){const folders={},files=[];let nested=0;for(let i=0;i<tree.length;i++){const element=tree[i];if("object"==typeof element&&element.constructor===Object){if(++nested>1)throw new Error("[ft-file-explorer] tree structures should contain only 1 child object : [{ ...folders }, ...files]");const keys=Object.keys(element).sort();keys.forEach(key=>folders[key]=this.sort(element[key]))}else{if("string"!=typeof element)throw new Error(`[ft-file-explorer] Invalid type for file system. Expecting object or string values, got: <${typeof element}> ${element}`);files.push(element)}}return[folders,...files.sort()]}writeToDOM(explorer,options,tree){explorer.innerHTML="\x3c!--\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    $$$    FT-FileExplorer CREATED BY github.com/soulshined    $$$\n    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n    --\x3e";const actions=new ElementBuilder("div").addClass("ft-file-explorer-actions").styles("display:flex; flex-flow: row nowrap; align-items: center; justify-content: flex-end"),deleteBtn=new ElementBuilder("button").addClass("delete").attr("title","Delete Item").innerText(options.buttons.delete.text.trim()),addFileBtn=new ElementBuilder("button").addClass("addfile").attr("title","Add File").innerText(options.buttons.addFile.text.trim()).attr("value","file"),addFolderBtn=new ElementBuilder("button").addClass("addfolder").attr("title","Add Folder").innerText(options.buttons.addFolder.text.trim()).attr("value","folder");if(options.buttons.delete.visible||deleteBtn.styles("visibility: collapse"),options.buttons.addFile.visible||addFileBtn.styles("visibility: collapse"),options.buttons.addFolder.visible||addFolderBtn.styles("visibility: collapse"),actions.append(deleteBtn,addFileBtn,addFolderBtn),explorer.appendChild(actions.build()),explorer.appendChild(tree),null!==options.rootPath&&"/"!==options.rootPath&&"string"==typeof options.rootPath)this.navigateToPath(explorer.id,options.rootPath);else{let f=tree.querySelector(".tree:first-of-type > .subtree .folder");if(!f&&(f=tree.querySelector(".tree:first-of-type > .subtree .file"),!f))return void Utils.toggleActiveExplorerItem(explorer.id,Utils.getRootFileExplorerItem(explorer.id));Utils.toggleActiveExplorerItem(explorer.id,f)}}registerEvents(explorer,options,tree){const fe=document.querySelector(`#${explorer.id} div.explorer`),addBtns=document.querySelectorAll(`#${explorer.id} .ft-file-explorer-actions .addfile, #${explorer.id} .ft-file-explorer-actions .addfolder`),deleteBtn=document.querySelector(`#${explorer.id} .ft-file-explorer-actions .delete`);addBtns.forEach(btn=>{btn.addEventListener("click",e=>{const target=e.target;let active=document.querySelector(`#${explorer.id} .active`);if(fe.contains(document.activeElement)&&Utils.isFileOrFolder(document.activeElement)&&(active=document.activeElement),!active)return void this.emit(new FTFileExplorerErrorEvent(explorer.id,null,"onCreating","No tree node is selected"));const val=target.value;if(!["file","folder"].includes(val.toLowerCase()))return void this.emit(new FTFileExplorerErrorEvent(explorer.id,null,"InvalidInputError","Can not properly identify button type"));let targetPath=active.getAttribute(Utils.ATTR_NAME),event=new FTFileExplorerEvent(EventTypes.CREATING,explorer.id,targetPath);event.data.nodeType=val.toLowerCase(),Utils.isFile(active)&&(targetPath=targetPath.substring(0,targetPath.lastIndexOf("/")));let result=this.emit(event);if(null===this.events[EventTypes.CREATING]&&(result=prompt(`Add ${val.toLowerCase()}\n\n${targetPath}`)),null==result||0===result.trim().length)return void this.emit(new FTFileExplorerErrorEvent(explorer.id,null,"onCreating","Invalid user input. Can not contain path separators and can not be empty"));if(result=result.trim(),/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g.test(result))return void this.emit(new FTFileExplorerErrorEvent(explorer.id,result,"InvalidInputError","Input can not contain path separators or special characters"));const padding=parseInt(active.style.paddingLeft,10)||0;if(event=new FTFileExplorerEvent(EventTypes.CREATED,explorer.id,targetPath+"/"+result),event.data.path.startsWith("//")&&(event.data.path=event.data.path.substring(1)),event.data.nodeType=val.toLowerCase(),event.data.isDuplicate=!1,null!==document.querySelector(`[${Utils.ATTR_NAME}="${targetPath+"/"+result}"]`)){const err=new FTFileExplorerErrorEvent(explorer.id,event.data.path,"onCreating",`The directory already contains a file or folder with the name '${result}'`);return err.data.isDuplicate=!0,void this.emit(err)}const elem=new ElementBuilder("li").addClass(val).attr(Utils.ATTR_NAME,event.data.path).attr("tabindex",0).innerText(result),insertBeforeResult=Utils.getInsertBeforeNode(event.data.path,active,val.toLowerCase(),explorer.id);Utils.isFile(active)&&"file"===event.data.nodeType?(elem.attr("role","treeitem"),insertBeforeResult.parent.insertBefore(elem.styles(`padding-left: ${padding}px`).build(),insertBeforeResult.target)):Utils.isFile(active)&&"folder"===event.data.nodeType?(elem.attr("aria-expanded",!0),elem.attr("role","group"),insertBeforeResult.parent.insertBefore(elem.styles(`padding-left: ${padding}px`).build(),insertBeforeResult.target)):Utils.isFolder(active)&&(elem.styles(`padding-left: ${padding+15}px`),"folder"===event.data.nodeType?(elem.attr("aria-expanded",!0),elem.attr("role","group")):elem.attr("role","treeitem"),insertBeforeResult.parent.insertBefore(elem.build(),insertBeforeResult.target)),Utils.toggleActiveExplorerItem(explorer.id,elem.build()),Utils.isFolder(elem.build())&&Utils.openFolder(elem.build()),!document.activeElement.isSameNode(fe)&&fe.contains(document.activeElement)&&elem.build().focus(),this.updateActionButtons(explorer.id),event.data.tree=Utils.convertToJSON(explorer.id),this.emit(event)})}),deleteBtn.onclick=e=>{let active=document.querySelector(`#${explorer.id} .active`);if(fe.contains(document.activeElement)&&Utils.isFileOrFolder(document.activeElement)&&(active=document.activeElement),!active)return;let shouldDelete=this.emit(new FTFileExplorerEvent(EventTypes.DELETING,explorer.id,active.getAttribute(Utils.ATTR_NAME)));if(null===this.events.deleting&&(shouldDelete=confirm(`Are you sure you want to delete ${active.getAttribute(Utils.ATTR_NAME).substring(1)}?`)),!shouldDelete||"boolean"!=typeof shouldDelete)return;const event=new FTFileExplorerDeletedEvent(explorer.id,active.getAttribute(Utils.ATTR_NAME));let sibling=null;const parentDir=Utils.getFileExplorerItemByPath(explorer.id,Utils.getFileExplorerItemParentDirPath(active));if(Utils.isFolder(active)){const siblingFolders=Utils.getSiblingFolders(active);if(siblingFolders.count>0)if(siblingFolders.next.length>0?sibling=siblingFolders.next[0]:siblingFolders.previous.length>0&&(sibling=siblingFolders.previous[0]),active.nextSibling&&active.nextSibling.classList.contains("subtree")&&active.closest("ul").removeChild(active.nextSibling),active.closest("ul").removeChild(active),sibling)sibling.focus(),Utils.toggleActiveExplorerItem(explorer.id,sibling);else{const files=Utils.getItemsForDirectory("files",parentDir);files.length>0?(files[0].focus(),Utils.toggleActiveExplorerItem(explorer.id,files[0])):(parentDir.focus(),Utils.toggleActiveExplorerItem(explorer.id,parentDir))}else{const files=Utils.getItemsForDirectory("files",parentDir);files.length>0?(active.nextSibling&&active.nextSibling.classList.contains("subtree")&&active.closest("ul").removeChild(active.nextSibling),active.closest("ul").removeChild(active),files[0].focus(),Utils.toggleActiveExplorerItem(explorer.id,files[0])):(active.nextSibling&&active.nextSibling.classList.contains("subtree")&&active.closest("ul").removeChild(active.nextSibling),active.closest("ul").removeChild(active),parentDir.focus(),Utils.toggleActiveExplorerItem(explorer.id,parentDir))}}else if(Utils.isFile(active)){if(active.nextSibling)sibling=active.nextSibling;else if(active.previousSibling)sibling=active.previousSibling;else{const siblingFolders=Utils.getItemsForDirectory("folders",parentDir);siblingFolders.length>0&&(sibling=siblingFolders.pop())}active.closest("ul").removeChild(active),sibling?(Utils.toggleActiveExplorerItem(explorer.id,sibling),sibling.focus()):(Utils.toggleActiveExplorerItem(explorer.id,parentDir),parentDir.focus())}event.data.tree=Utils.convertToJSON(explorer.id),this.updateActionButtons(explorer.id),this.emit(event)},fe.onclick=e=>{const target=e.target;if(Utils.isFile(target)||Utils.isFolder(target)){const event=new FTFileExplorerSelectedEvent(explorer.id,target.getAttribute(Utils.ATTR_NAME));let padding=+target.style.paddingLeft.substring(0,target.style.paddingLeft.length-2);fe.scrollTo(padding-10,fe.scrollTop),Utils.isFolder(target)?Utils.isRoot(target)||(target.classList.toggle("open"),target.setAttribute("aria-expanded",`${Utils.isFolderOpen(target)}`),event.data.state=Utils.isFolderOpen(target)?"expanded":"collapsed"):Utils.isFile(target)&&(event.data.nodeType="file"),Utils.toggleActiveExplorerItem(explorer.id,target),target.focus(),this.emit(event)}},fe.onkeyup=e=>{if(!options.allowKeyboardEventsOnFocus)return;const target=e.target;if(fe.contains(target)||document.activeElement.isSameNode(fe)||Utils.isFile(target)||Utils.isFolder(target))if(["ArrowDown","ArrowUp"].includes(e.key)){let newTarget=null;newTarget="ArrowDown"===e.key?Utils.getNextVisibleLogicalOrderFileExplorerItem(explorer.id,target):Utils.getPreviousVisibleLogicalOrderFileExlporerItem(explorer.id,target),newTarget&&newTarget.focus()}else if("ArrowRight"===e.key){if(Utils.isFolder(target)){if(target.setAttribute("aria-expanded",`${Utils.isFolderOpen(target)}`),!Utils.isFolderOpen(target))return void Utils.openFolder(target);const subfolders=Utils.getItemsForDirectory("folders",target);if(subfolders.length>0)return void subfolders[0].focus();const files=Utils.getItemsForDirectory("files",target);files.length>0&&files[0].focus()}}else if("ArrowLeft"!==e.key||Utils.isRoot(target))if(" "===e.key&&!Utils.isRoot(target)||"Enter"===e.key&&!Utils.isRoot(target)){if(!Utils.isFileOrFolder(target))return;const event=new FTFileExplorerSelectedEvent(explorer.id,target.getAttribute(Utils.ATTR_NAME));Utils.isFolder(target)&&(event.data.nodeType="folder",Utils.toggleFolder(target),Utils.isRoot(target)||(event.data.state=Utils.isFolderOpen(target)?"expanded":"collapsed")),Utils.toggleActiveExplorerItem(explorer.id,target),target.focus(),this.emit(event)}else"Delete"===e.key?(document.querySelector(`#${explorer.id} button.delete`).click(),this.updateActionButtons(explorer.id)):"n"!==e.key||e.shiftKey||e.ctrlKey?"N"===e.key&&e.shiftKey&&!e.ctrlKey&&(document.querySelector(`#${explorer.id} button.addfolder`).click(),deleteBtn.disabled=!1):(document.querySelector(`#${explorer.id} button.addfile`).click(),deleteBtn.disabled=!1);else if(Utils.isFileOrFolder(target)){if(Utils.isFolder(target)&&Utils.isFolderOpen(target))return void target.classList.remove("open");const parent=Utils.getFileExplorerItemByPath(explorer.id,Utils.getFileExplorerItemParentDirPath(target));parent&&parent.focus()}}}updateActionButtons(explorerId){const deleteBtn=document.querySelector(`#${explorerId} .ft-file-explorer-actions button.delete`);deleteBtn.disabled=0===Utils.getAllItemsForDirectory(Utils.getRootFileExplorerItem(explorerId)).count}navigateToPath(explorerId,path){if("string"!=typeof path||""===path||"/"===path)throw new Error("[ft-file-explorer] path must be a string datatype referencing a valid tree node path");{let rootPath=path;rootPath.startsWith("/")||(rootPath="/"+rootPath);const root=document.querySelector(`#${explorerId} [${Utils.ATTR_NAME}="${rootPath}"]`);if(root){const paths=rootPath.split("/").filter(f=>""!==f.trim()).map(m=>`/${m}`);let currentDir="";paths.forEach(path=>{currentDir+=path,Utils.openFolder(document.querySelector(`#${explorerId} [${Utils.ATTR_NAME}="${currentDir}"]`))}),Utils.toggleActiveExplorerItem(explorerId,root),root.focus()}else this.emit(new FTFileExplorerErrorEvent(explorerId,path,"openPath","Explorer item doesn't exist"))}}}var EventTypes;!function writeStylesToDOM(){const style=document.createElement("STYLE");style.type="text/css",style.appendChild(document.createTextNode('/*\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$$$    FT-FILE-EXPLORER CREATED BY github.com/soulshined    $$$\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\n:root{--ft-fe-active:#e4e6f1;--ft-fe-hover:#e8e8e8}.ft-file-explorer,.ft-file-explorer ul{margin:0;padding:0}.ft-file-explorer *{box-sizing:border-box}.ft-file-explorer .explorer>ul.tree{display:flex;flex-flow:column nowrap;flex:1}.ft-file-explorer .explorer>ul.tree li{list-style:none;cursor:pointer;word-break:keep-all;white-space:nowrap;padding:0;margin:0}.ft-file-explorer .explorer>ul.tree>li:not(.root){padding-left:10px}.ft-file-explorer .explorer.compact>ul.tree li.files{text-indent:7px}.ft-file-explorer li.file.active,.ft-file-explorer li.folder.active{background-color:var(--ft-fe-active)}.ft-file-explorer li.file:focus:not(.active),.ft-file-explorer li.file:hover,.ft-file-explorer li.folder:focus:not(.active),.ft-file-explorer li.folder:hover{background-color:var(--ft-fe-hover)}.ft-file-explorer .explorer>ul.tree li.file,.ft-file-explorer .explorer>ul.tree li.folder{display:flex;align-items:center;user-select:none;padding-top:2px!important;padding-bottom:2px!important}.ft-file-explorer .explorer li.folder::before{display:flex;padding-right:calc(1em / 3);align-self:flex-start;content:url(\'data:image/svg+xml; utf8, <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 22" fill="%23C8C8C8"><path d="M22,6H12l-2-2H2v16h20V6z"></path></svg>\');width:1em;height:1em}.ft-file-explorer .explorer li.folder.open::before{content:url(\'data:image/svg+xml; utf8, <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 22 22" fill="%23C8C8C8"><path d="M22,6H12l-2-2H2v16h20V6z M20,18H4V8h16V18z"></path></svg>\');width:1em;height:1em}.ft-file-explorer .explorer.compact li.folder::before{padding-right:0;content:url("data:image/svg+xml;charset=utf-8,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 14 14\' width=\'18px\' height=\'18px\'><path fill=\'%23C8C8C8\' d=\'M6 4v8l4-4-4-4zm1 2.414L8.586 8 7 9.586V6.414z\'/></svg>")}.ft-file-explorer .explorer.compact li.folder.open::before{content:url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="18px" height="18px"><path fill="%23C8C8C8" d="M11 10H5.344L11 4.414V10z"/></svg>\')}.ft-file-explorer li.folder:not(.open)+li.subtree{display:none}')),document.head.prepend(style)}(),HTMLElement.prototype.scrollTo||(HTMLElement.prototype.scrollTo=function(left,top){this.scrollTop=top,this.scrollLeft=left}),"undefined"!=typeof module&&module.exports&&(module.exports={FTFileExplorer:FTFileExplorer,FTFileExplorerOptions:FTFileExplorerOptions}),"undefined"!=typeof window&&(window.FTFileExplorer=FTFileExplorer,window.FTFileExplorerOptions=FTFileExplorerOptions),function(EventTypes){EventTypes.SELECTED="selected",EventTypes.DELETED="deleted",EventTypes.DELETING="deleting",EventTypes.CREATED="created",EventTypes.CREATING="creating",EventTypes.ERROR="error"}(EventTypes||(EventTypes={}));class EventData{constructor(explorerId,path){this.nodeType="file",this.explorerId=explorerId,this.path=path,Utils.isFolder(Utils.getFileExplorerItemByPath(explorerId,path))&&(this.nodeType="folder"),this.path=path||null}}class FTFileExplorerEvent{constructor(type,explorerId,path){this.type=type,this.data=new EventData(explorerId,path)}}class FTFileExplorerErrorEvent extends FTFileExplorerEvent{constructor(explorerId,path,action,errorMsg){super(EventTypes.ERROR,explorerId,path),this.data.error={action:action,msg:errorMsg}}}class FTFileExplorerSelectedEvent extends FTFileExplorerEvent{constructor(explorerId,path){super(EventTypes.SELECTED,explorerId,path)}}class FTFileExplorerDeletedEvent extends FTFileExplorerEvent{constructor(explorerId,path){super(EventTypes.DELETED,explorerId,path)}}class Utils{static openFolder(target){this.isFolderOpen(target)||(target.classList.add("open"),target.setAttribute("aria-selected","true"),target.setAttribute("aria-expanded","true"))}static closeFolder(target){this.isFolderOpen(target)&&(target.classList.remove("open"),target.setAttribute("aria-selected","false"),target.setAttribute("aria-expanded","false"))}static toggleFolder(target){this.isFolderOpen(target)?this.closeFolder(target):this.openFolder(target)}static isFile(element){return element&&"LI"===element.tagName&&element.classList.contains("file")}static isFolder(element){return element&&"LI"===element.tagName&&element.classList.contains("folder")}static isFileOrFolder(element){return this.isFile(element)||this.isFolder(element)}static isFolderOpen(element){return element&&element.classList.contains("open")}static isRoot(element){return this.isFolder(element)&&"/"===element.getAttribute(this.ATTR_NAME)}static toggleActiveExplorerItem(explorerId,target){[...document.querySelectorAll(`#${explorerId} div.explorer li.file, #${explorerId} div.explorer li.folder`)].map(m=>{m.classList.remove("active"),m.setAttribute("aria-selected","false")}),target.classList.add("active"),target.setAttribute("aria-selected","true")}static getRootFileExplorerItem(explorerId){return document.querySelector(`#${explorerId} div.explorer [${this.ATTR_NAME}="/"]`)}static getFileExplorerItemByPath(explorerId,path){return document.querySelector(`#${explorerId} div.explorer [${this.ATTR_NAME}="${path}"]`)}static getFileExplorerItemParentDirPath(target){let path=target.getAttribute(this.ATTR_NAME);return path=path.substring(0,path.lastIndexOf("/")),""===path?"/":path}static getItemsForDirectory(itemType,target){if(!this.isFolder(target))return[];if(target.nextSibling&&target.nextSibling.classList.contains("subtree")){const subtree="files"===itemType?target.nextSibling.firstChild.lastChild.firstChild:target.nextSibling.firstChild.firstChild.firstChild;if(subtree.parentElement.classList.contains(itemType)&&"LI"===subtree.parentElement.tagName)return[...subtree.childNodes].filter(f=>!f.classList.contains("subtree"))}return[]}static getAllItemsForDirectory(target,excludeSubtree=!0){if(!this.isFolder(target))return{folders:[],files:[],count:0};if(target.nextSibling&&target.nextSibling.classList.contains("subtree")){const subtree=target.nextSibling.firstChild;let folders=[...subtree.firstChild.firstChild.childNodes];excludeSubtree&&(folders=folders.filter(f=>!f.classList.contains("subtree")));const files=[...subtree.lastChild.firstChild.childNodes];return{folders:folders,files:files,count:folders.length+files.length}}return{folders:[],files:[],count:0}}static getSiblingFolders(target){const subtree=target.closest(".subtree > ul:first-child > li.folders:first-child > ul:first-child"),children=[...subtree.children].filter(c=>c.classList.contains("folder")),index=children.indexOf(target);if(index<0)return{previous:[],next:[],count:0};const previous=children.slice(0,index).reverse(),next=children.slice(index+1);return{previous:previous,next:next,count:previous.length+next.length}}static getPreviousVisibleLogicalOrderFileExlporerItem(explorerId,target){if(!this.isRoot(target)){if(this.isFile(target)){if(target.previousSibling)return target.previousSibling;const dir=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(target)),siblingFolders=this.getItemsForDirectory("folders",dir);if(siblingFolders.length>0){const last=siblingFolders[siblingFolders.length-1];if(!last.classList.contains("open"))return last;const files=this.getItemsForDirectory("files",last);if(files.length>0)return files.pop();const subfolders=this.getItemsForDirectory("folders",last);if(subfolders.length>0){if(!subfolders[subfolders.length-1].classList.contains("open"))return subfolders[subfolders.length-1];const files=this.getItemsForDirectory("files",subfolders[subfolders.length-1]);return files.length>0?files[files.length-1]:subfolders[subfolders.length-1]}return last}{const parentDir=this.getFileExplorerItemParentDirPath(target);return this.getFileExplorerItemByPath(explorerId,parentDir)}}if(this.isFolder(target)){const siblingFolders=this.getSiblingFolders(target);if(siblingFolders.previous.length>0){if(!siblingFolders.previous[0].classList.contains("open"))return siblingFolders.previous[0];const subtree=siblingFolders.previous[0].nextSibling;if(subtree){const files=this.getItemsForDirectory("files",subtree.previousSibling);if(files.length>0){let file=null;fileLoop:for(let i=0;i<files.length;i++){const element=files[i];if(this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(element)).classList.contains("open")){file=element;break fileLoop}}if(file)return file}}const siblingSubfolders=this.getItemsForDirectory("folders",siblingFolders.previous[0]);if(0===siblingSubfolders.length)return siblingFolders.previous[0];const closedFoldersAboveTarget=siblingSubfolders[0].parentElement.querySelectorAll("li.folder:not(.open)"),bottomMostOpenFoldersAboveTarget=siblingSubfolders[0].parentElement.querySelectorAll("li.folder.open");let folder=null;folder=0===closedFoldersAboveTarget.length&&bottomMostOpenFoldersAboveTarget.length>0?this.getFileExplorerItemByPath(explorerId,bottomMostOpenFoldersAboveTarget[bottomMostOpenFoldersAboveTarget.length-1].getAttribute(this.ATTR_NAME)):this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(closedFoldersAboveTarget[0]));const files=this.getItemsForDirectory("files",folder);if(files.length>0)return files[files.length-1];const bottomMostFolderSubFolders=this.getItemsForDirectory("folders",folder);return 0===bottomMostFolderSubFolders.length?folder:bottomMostFolderSubFolders.pop()}{const parentDir=this.getFileExplorerItemParentDirPath(target);return this.getFileExplorerItemByPath(explorerId,parentDir)}}}}static getNextVisibleLogicalOrderFileExplorerItem(explorerId,target){if(this.isFile(target)){if(target.nextSibling)return target.nextSibling;let closestSubtree=target.closest(".subtree"),dirParent=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(closestSubtree.previousSibling));if(closestSubtree.nextSibling)return closestSubtree.nextSibling;if(!target.nextSibling&&Utils.isRoot(this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(target))))return;do{const files=this.getItemsForDirectory("files",dirParent);if(files.length>0)return files[0];dirParent=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(dirParent))}while(null!==dirParent&&"/"!==this.getFileExplorerItemParentDirPath(dirParent))}else if(this.isFolder(target))if(this.isFolderOpen(target)){const subfolders=this.getItemsForDirectory("folders",target);if(subfolders.length>0)return subfolders[0];let files=this.getItemsForDirectory("files",target);if(files.length>0)return files[0];if(this.isRoot(target))return;const siblingFolders=this.getSiblingFolders(target);if(siblingFolders.next.length>0)return siblingFolders.next[0];if(files=this.getItemsForDirectory("files",this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(target))),files.length>0)return files[0];const parent=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(target));let dirParent=parent,dirTarget=target;do{const siblingFolders=this.getSiblingFolders(dirParent);if(siblingFolders.next.length>0)return siblingFolders.next[0];let files=this.getItemsForDirectory("files",dirParent);if(files.length>0)return files[0];if(files=this.getItemsForDirectory("files",this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(dirParent))),files.length>0)return files[0];const cachedParent=dirParent;dirParent=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(dirTarget)),dirTarget=cachedParent}while(null!==dirParent&&!this.isRoot(dirParent))}else{const parent=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(target));let dirParent=parent,dirTarget=target;do{const siblingFolders=this.getSiblingFolders(dirTarget);if(siblingFolders.next.length>0)return siblingFolders.next[0];let files=this.getItemsForDirectory("files",dirParent);if(files.length>0)return files[0];const cachedParent=dirParent;dirParent=this.getFileExplorerItemByPath(explorerId,this.getFileExplorerItemParentDirPath(dirTarget)),dirTarget=cachedParent}while(null!==dirParent&&!this.isRoot(dirParent))}}static getInsertBeforeNode(targetPath,activeNode,addType,explorerId){let result={parent:null,target:null};if(Utils.isFolder(activeNode)){activeNode.nextSibling&&activeNode.nextSibling.classList.contains("subtree")||activeNode.parentElement.insertBefore(ElementBuilder.newSubtree().build(),activeNode.nextSibling);let target=activeNode.nextSibling.firstChild;if(target="file"===addType?target.lastChild.firstChild:target.firstChild.firstChild,"file"===addType){result.parent=target;const childNodes=[...result.parent.childNodes],files=childNodes.map(m=>m.getAttribute(Utils.ATTR_NAME));if(files.push(targetPath),files.sort(),files.length>1){const targetIndex=files.indexOf(targetPath);result.target=childNodes.filter(f=>f.getAttribute(Utils.ATTR_NAME)===files[targetIndex+1])[0]}}else{result.parent=target;const childNodes=[...result.parent.childNodes],subfolders=childNodes.filter(f=>!f.classList.contains("subtree")).map(m=>m.getAttribute(Utils.ATTR_NAME));if(subfolders.length>0){subfolders.push(targetPath),subfolders.sort();const targetIndex=subfolders.indexOf(targetPath);targetIndex!==subfolders.length-1&&-1!==targetIndex&&(result.target=childNodes.filter(f=>f.getAttribute(Utils.ATTR_NAME)===subfolders[targetIndex+1])[0])}}Utils.isFolderOpen(activeNode)||Utils.isRoot(activeNode)||Utils.openFolder(activeNode)}else if(Utils.isFile(activeNode)){result.parent=activeNode.parentElement;const items=Utils.getAllItemsForDirectory(Utils.getFileExplorerItemByPath(explorerId,Utils.getFileExplorerItemParentDirPath(activeNode)),!1);if("file"===addType){const files=items.files.map(m=>m.getAttribute(Utils.ATTR_NAME));files.push(targetPath),files.sort();const targetIndex=files.indexOf(targetPath);result.target=items.files.filter(f=>f.getAttribute(Utils.ATTR_NAME)===files[targetIndex+1])[0]}else{result.parent=document.querySelector(`#${explorerId} [${Utils.ATTR_NAME}="${Utils.getFileExplorerItemParentDirPath(activeNode)}"] + .subtree > ul:first-child > li.folders > ul:first-child `);let prev=null;const folders=items.folders.map(m=>{if(m.classList.contains("subtree"))return prev;{const path=m.getAttribute(Utils.ATTR_NAME);return prev=path,path}});folders.push(targetPath),folders.sort();const targetIndex=folders.indexOf(targetPath);result.target=items.folders.filter(f=>f.getAttribute(Utils.ATTR_NAME)===folders[targetIndex+1])[0]}}return result}static convertToJSON(explorerId){const root=Utils.getRootFileExplorerItem(explorerId);return this.getJSONSegements(explorerId,root)}static getJSONSegements(explorerId,dir){const json=[],items=Utils.getAllItemsForDirectory(dir),folders={};return items.count>0&&(items.folders.forEach(f=>{const path=f.getAttribute(this.ATTR_NAME);folders[path.substring(path.lastIndexOf("/")+1)]=this.getJSONSegements(explorerId,Utils.getFileExplorerItemByPath(explorerId,path))}),json.push(folders),json.push(...items.files.map(f=>{const path=f.getAttribute(this.ATTR_NAME);return path.substring(path.lastIndexOf("/")+1)}))),json}}Utils.ATTR_NAME="data-ft-file-explorer-path";